* itoa
** Write a function that takes an (unsigned) int and returns it as string.
We can isolate the rightmost digit of the number, transform it into a
character, and put it into a string. And do so for each digit of the
number. Finally we will have to reverse the string.

How to isolate one digit? We can isolate the rightmost digit of a
number by doing modulo 10. E.g. 10 % 10 = 0 and 22 % 10 = 2.

How to get the other digits? One option is get rid of the digit we
just processed. We can do so by dividing the number by 10. The number
will be ``shifted'' towards right. 10 / 10 = 1, 22 / 10 = 2.

#+begin_src C
  void itoa(uint32_t n, char s[])
  {
      uint32_t i = 0;    
      while (n != 0) {
          s[i] = n % 10 + '0';
          n = n / 10;
          i++;
      }
      s[i] = '\0';
      reverse(s);
  }
#+end_src
*** Would you write differently if you had to represent the number in Hex?
If we have to represent the number in hexadecimal (or any other
numeral system with a base that is a power of 2), then we could use
bitwise operations, which are less costly than % (modulo) and /
(division).

Using & (bitwise AND) we can ``isolate'' the number of bits that would
allow us to represent them by one digit of the numeral systems we are
using (and put that digit into a string). For example, a hexadecimal
digit represents four bits. After that, we can use >> (bitwise shift)
to get rid of those bits we have translated.

Assuming, for simplicity, that a number is represented by 8 bits), 34,
say, is represented in binary by 00100010. Let's get the less
signicant four bits that will represent a digit:
#+begin_src C
digit = number & 15;
#+end_src C

We can now transform value of digit into a char and put it into a
string. Let's now shift the number towards right:
#+begin_src C
number >>= 4;
#+end_src

We can now translate again the 

Let's write the reasoning into a function.
#+begin_src C
  void itoa(uint32_t n, char s[]) {
      uint32_t i;
      i = 0;
      while (n != 0) {
          s[i] = "0123456789ABCDEF"[n & 15];
          n >>= 4;
          i++;
      }
      s[i] = '\0';
      reverse(s);
  }
#+end_src

* Two Sum (Leet Code) | Solution(s) in C
The problem:
#+begin_quote
Given an array of integers nums and an integer target, return indices
of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and
you may not use the same element twice.

You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
2 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Only one valid answer exists.
#+end_quote
** Simple solution
#+begin_src C
  /**
  * Note: The returned array must be malloced, assume caller calls free().
  */
  int* twoSum(int* nums, int numsSize, int target, int* returnSize){
      int *arr = (int*)malloc(2 * sizeof(int));
      *returnSize = 2;
      for (int i = 0; i < numsSize; i++) {
          for (int j = 0; j < numsSize; j++) {
              if (i != j) {
                  if (nums[i] + nums[j] == target) {
                      arr[0] = i;
                      printf("%i\n", i);
                      arr[1] = j;
                      printf("%i\n", j);
                  }
              }
          }
      }
      return arr;
  }
#+end_src

This works but we are iterating over the array of nums and, for each
num, we are iterating again over the whole array of numbs. This means
O(n^2). Not good.
** Hash table
We can avoid the second iteration. How?

For each element x in the nums array we are asking this question: is
there another element --- the ``complement'' --- y in the array such
that target - x = y?

Is there a way to answer that question without iterating over the
whole array?  Not quite; but there is a way to answer that question by
iterating over the array /only once/. How? We can use /one/ loop over
the array to create a data structure made of key-value pairs that
allows for quick lookup (that is, you have a key and you can quickly
lookup its associated value). The best implementation of a such a data
structure is a /hash table/. Once we have created a hash table we can
answer the question immediately.

Have a look at what a hash table is...[relevant links?]

Probably the easiest way to implement a hash table is using an array
of pointers to linked lists.  First let's decide the size of the
array, declare the structure type for the nodes of the linked lists
and create the hashtable.  Then we need a hash function (hash), a
function for searching (lookup) and one for adding element to the hash
table. Finally we can write our twoSum function.
#+begin_src C
  #define HASH_SIZE 101

  typedef struct node {
      int key;
      int val;
      struct node *next;
  } node;


  static node *hashtable[HASH_SIZE];
  //https://stackoverflow.com/questions/664014/what-integer-hash-function-are-good-that-accepts-an-integer-hash-key
  unsigned int hash(unsigned int x) {
      x = ((x >> 16) ^ x) * 0x45d9f3b;
      x = ((x >> 16) ^ x) * 0x45d9f3b;
      x = (x >> 16) ^ x;
      return x;
  }

  // Cf. K&R p. 144-5
  node *lookup(int i) {
      node *np;

      for (np = hashtable[hash(i) % HASH_SIZE]; np != NULL; np = np->next)
          if (np->key == i)
              return np; /* FOUND */
      return NULL;       /* NOT FOUND */
  }

  node *install(int i, int j) {
      node *np = (node *)malloc(sizeof(*np));
      if (np == NULL)
          return NULL;

      np->key = i;
      np->val = j;

      unsigned hashval = hash(i);

      printf("Installing {key: %d, val: %d} at hashtable[%d]: %u\n", i, j, hashval); 

      np->next = hashtable[hashval % HASH_SIZE];
      hashtable[hashval % HASH_SIZE] = np;
      return np;
  }

  int* twoSum(int* nums, int numsSize, int target, int* returnSize){
      //memset(hashtable, 0, sizeof(hashtable)); // you need to do this in leetcode even if hashtable is a global variable (and therefore automatically initialized to 0)

      for (int i = 0; i < numsSize; i++) {
          install(nums[i], i);
      }

      node *np;
      int complement;
      for (int i = 0; i < numsSize; i++) {
          complement = target - nums[i];
          np = lookup(complement);
          if (np != NULL) {
              if (np->val != i) {
                  printf("Complement found\n");
                  *returnSize = 2;
                  int *result = malloc(2 * sizeof(int));
                  result[0] = i;
                  result[1] = np->val;
                  return result;
              }            
          }
      }    
      *returnSize = 0;
      return NULL;
  }
#+end_src
** Improving the hash table solution
We don't need two loops. Have a look. The only thing that has been
changed is twoSum.

#+begin_src C
  #define HASH_SIZE 101

  typedef struct node {
      int key;
      int val;
      struct node *next;
  } node;

  node *hashtable[HASH_SIZE];

  // https://stackoverflow.com/questions/664014/what-integer-hash-function-are-good-that-accepts-an-integer-hash-key
  unsigned int hash(unsigned int x) {
      x = ((x >> 16) ^ x) * 0x45d9f3b;
      x = ((x >> 16) ^ x) * 0x45d9f3b;
      x = (x >> 16) ^ x;
      return x;
  }

  // Cf. K&R p. 144-5
  node *lookup(int i) {
      node *np;

      for (np = hashtable[hash(i) % HASH_SIZE]; np != NULL; np = np->next)
          if (np->key == i)
              return np; // FOUND
      return NULL;       // NOT FOUND
  }

  node *install(int i, int j) {
      node *np = (node *)malloc(sizeof(*np));
      if (np == NULL)
          return NULL;

      np->key = i;
      np->val = j;

      unsigned hashval = hash(i);

      //printf("Installing {key: %d, val: %d} at hashtable[%d]: %u\n", i, j, hashval); 

      np->next = hashtable[hashval % HASH_SIZE];
      hashtable[hashval % HASH_SIZE] = np;
      return np;
  }

  int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
      //memset(hashtable, 0, sizeof(hashtable)); // you need to do this in leetcode even if hashtable is a global variable (and therefore automatically initialized to 0)
      //https://support.leetcode.com/hc/en-us/articles/360011834174-I-encountered-Wrong-Answer-Runtime-Error-for-a-specific-test-case-When-I-test-my-code-using-this-test-case-it-produced-the-correct-output-Why-

      node *np;
      int complement; 
      for (int i = 0; i < numsSize; i++) {
          complement = target - nums[i];
          np = lookup(complement);
          if (np != NULL) {
              *returnSize = 2;
              int *result = malloc(2 * sizeof(int));
              result[0] = i;
              result[1] = np->val;
              return result;
          }
          install(nums[i], i);
      }

      *returnSize = 0;
      return NULL;
  }
#+end_src
** Improving more
*** 
We can still improve

If we use a HASH_SIZE that is power of two then we can do & instead of
%. So instead of
#+begin_src C
hashtable[hashval % HASH_SIZE]
#+end_src
we can do:
#+begin_src C
Hashtable[hashval & (HASH_SIZE -1) ]
#+end_src

Moreover, instead of hardcoding the hash size we could make our
program able to change the number of buckets at runtime. We can still
use the same hash function.

#+begin_src C
  struct hashtableType {
    int count ;
    int growthThreshold;
    int numBuckets;
    node *hashtable;
  }
#+end_src
*** 
A hash table should be able to resize itself at runtime. After a
certain threshold, the linked lists become to long, so we want more
our hash table to have more buckets.

How? When we reach the threshold, we malloc more space for a new
bigger hashtable. We go through the old hash table and we move each
element in its new bucket in the new hash table. We free the space
allocated for the old hash table and the rest is unchanged.

#+begin_src C
  #include <stdio.h>
  #include <stdlib.h>

  #define GROWTH 8

  typedef struct node {
      int key;
      int val;
      struct node *next;
  } node;

  void printHt(node **hashtable, int size);

  struct hashtableType {
      int count;
      int growthThreshold;
      int numsBuckets;
      node **hashtable;
  } ht;

  void htInitialize() {
      printf("Initializing\n");
      ht.count = 0;
      ht.numsBuckets = 64;
      ht.growthThreshold = ht.numsBuckets * GROWTH;
      ht.hashtable = malloc(ht.numsBuckets * sizeof(node *));
      for (int i = 0; i < ht.numsBuckets; i++) {
          ht.hashtable[i] = NULL;
      }
  }

  // https://stackoverflow.com/questions/664014/what-integer-hash-function-are-good-that-accepts-an-integer-hash-key
  unsigned int hash(unsigned int x) {
      x = ((x >> 16) ^ x) * 0x45d9f3b;
      x = ((x >> 16) ^ x) * 0x45d9f3b;
      x = (x >> 16) ^ x;
      return x;
  }

  node *lookup(int i) {
      //printf("looking up\n");
      node *np;
    
      for (np = ht.hashtable[hash(i)&(ht.numsBuckets-1)]; np != NULL; np = np->next) {
          //printf("%i", j);
          if (np->key == i)
              return np; // FOUND
      }
      return NULL;       // NOT FOUND
  }

  node *install(int i, int j) {
      ht.count += 1;
      printf("count: %i\n", ht.count);
      if (ht.count < ht.growthThreshold) {
          ; //printf("Count lower than threshold\n");
      } else { // we need to increase the size of the hash table        
          printf("Gotta resize hashtable\n");

          printf("HASH TABLE TO BE RESIZED: \n");
          printHt(ht.hashtable, ht.numsBuckets);

          node **newHashtable = malloc(2 *(ht.numsBuckets * sizeof(node *))); // alloc double space
          int newNumsBuckets = ht.numsBuckets * 2;
          for (int i = 0; i < newNumsBuckets; i++) // make the new memory allocated NULL
              newHashtable[i] = NULL;

          for (int i = 0; i < ht.numsBuckets; i++) { // install old elements in the new hash table  
              if (ht.hashtable[i] != NULL) {
                  node *current = ht.hashtable[i];		
                  do {
                      node *next = current->next;
                      printf("re-hashing key %i (old hash %i, new hash: %i)\n",
                             current->key, hash(current->key)&(ht.numsBuckets-1), hash(current->key)&(newNumsBuckets-1));
                      current->next = newHashtable[hash(current->key)&(newNumsBuckets-1)];
                      newHashtable[hash(current->key)&(newNumsBuckets-1)] = current;
                      current = next;
                  } while (current != NULL);                
              }
          }
          free(ht.hashtable);
          ht.hashtable = newHashtable;
          ht.numsBuckets = newNumsBuckets;
          ht.growthThreshold = newNumsBuckets * GROWTH;
      }
        
      node *np = (node *)malloc(sizeof(*np));
      if (np == NULL) {
          printf("np is NULL!\n");
          return NULL;
      }
    
      np->key = i;
      np->val = j;
    
      unsigned hashval = hash(i);
    
      printf("Installing {key: %d, val: %d} at hashtable[%d]\n", i, j, hashval&(ht.numsBuckets-1));

      np->next = ht.hashtable[hashval&(ht.numsBuckets-1)];
      ht.hashtable[hashval&(ht.numsBuckets-1)] = np;

      printf("HASH TABLE: \n");
      printHt(ht.hashtable, ht.numsBuckets);
    
      return np;
  }

  void printHt(node **hashtable, int size) {
      for (int i = 0; i < size; i++) {
          node *current = hashtable[i];
          //printf("Bucket %i: ", hash(current->key)&(size-1));
          if (current != NULL) {
              printf("Bucket %i: ", i);
              while (current != NULL) {
                  printf("(%i, %i); ", current->key, current->val);
                  current = current->next;
              }	    
              printf("\n");
          } else {
              //printf("NULL\n");
          }
      }
  };

  int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
      htInitialize();
        
      node *np;
      int complement;
      for (int i = 0; i < numsSize; i++) {
          complement = target - nums[i];
          np = lookup(complement);
          if (np != NULL) {
              *returnSize = 2;
              int *result = malloc(2 * sizeof(int));
              result[0] = i;
              result[1] = np->val;
              return result;
          }
          install(nums[i], i);
      }
  
      *returnSize = 0;
      return NULL;
  }

  int main(void) {
      int nums[] = {1, 2, 3, 13, 5, 6, 8, 9, 10, 11, 12, 4};
      int returnSize = 0;
      int *result = twoSum(nums, 13, 25, &returnSize);

      for (int i = 0; i < returnSize; i++) {
          printf("%i ", result[i]);
      }
      printf("\n");
    
      return 0;
  }
#+end_src
